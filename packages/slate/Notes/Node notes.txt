## Node
/**
 * The `Node` union type represents all of the different types of nodes that
 * occur in a Slate document tree.
 */

export type Node = Editor | Element | Text

# relevant types

export type Descendant = Element | Text
/**
 * The `Descendant` union type represents nodes that are descendants in the
 * tree. It is returned as a convenience in certain cases to narrow a value
 * further than the more generic `Node` union.
 */

export type Ancestor = Editor | Element
/**
 * The `Ancestor` union type represents nodes that are ancestors in the tree.
 * It is returned as a convenience in certain cases to narrow a value further
 * than the more generic `Node` union.
 */

export type NodeEntry<T extends Node = Node> = [T, Path]
/**
 * `NodeEntry` objects are returned when iterating over the nodes in a Slate
 * document tree. They consist of the node and its `Path` relative to the root
 * node in the document.
 */

# methods

ancestor
ancestors
child
children
common
descendant
descendants
elements
first
fragment
get
has
isNode
isNodeList
last
leaf
*levels
matches
*nodes
parent
string
*texts

ancestor(root: Node, path: Path): Ancestor {
/**
* Get the node at a specific path, asserting that it's an ancestor node.
*/

ancestors(root: Node, path: Path, options: { reverse?: boolean } = {}): Iterable<NodeEntry<Ancestor>> 
/**
* Return an iterable of all the ancestor nodes above a specific path.
*
* By default the order is bottom-up, from lowest to highest ancestor in
* the tree, but you can pass the `reverse: true` option to go top-down.
*/

child(root: Node, index: number): Descendant 
/**
* Get the child of a node at a specific index.
*/

children(root: Node, path: Path, options: { reverse?: boolean} = {}): Iterable<NodeEntry<Descendant>>
/**
* Iterate over the children of a node at a specific path.
*/

common(root: Node, path: Path, another: Path): NodeEntry 
/**
* Get an entry for the common ancesetor node of two paths.
*/

descendant(root: Node, path: Path): Descendant
/**
* Get the node at a specific path, asserting that it's a descendant node.
*/

descendants(root: Node, options: { from?: Pathto?: Path reverse?: boolean pass?: (node: NodeEntry) => boolean } = {}): Iterable<NodeEntry<Descendant>>
/**
* Return an iterable of all the descendant node entries inside a root node.
*/

elements(root: Node, options: {from?: Path to?: Path reverse?: boolean pass?: (node: NodeEntry) => boolean} = {}): Iterable<ElementEntry> 
/**
* Return an iterable of all the element nodes inside a root node. Each iteration
* will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the
* root node is an element it will be included in the iteration as well.
*/

first(root: Node, path: Path): NodeEntry 
/**
* Get the first node entry in a root node from a path.
*/

fragment(root: Node, range: Range): Descendant[]
/**
* Get the sliced fragment represented by a range inside a root node.
*/

get(root: Node, path: Path): Node 
/**
* Get the descendant node referred to by a specific path. If the path is an
* empty array, it refers to the root node itself.
*/

has(root: Node, path: Path): boolean 
/**
* Check if a descendant node exists at a specific path.
*/

isNode(value: any): value is Node 
/**
* Check if a value implements the `Node` interface.
*/

isNodeList(value: any): value is Node[]
/**
* Check if a value is a list of `Node` objects.
*/

last(root: Node, path: Path): NodeEntry 
/**
* Get the lash node entry in a root node from a path.
*/

leaf(root: Node, path: Path): Text
/**
* Get the node at a specific path, ensuring it's a leaf text node.
*/

*levels(root: Node, path: Path, options: { reverse?: boolean } = {} ): Iterable<NodeEntry> 
/**
* Return an iterable of the in a branch of the tree, from a specific path.
*
* By default the order is top-down, from lowest to highest node in the tree,
* but you can pass the `reverse: true` option to go bottom-up.
*/

matches(node: Node, props: Partial<Node>): boolean
/**
* Check if a node matches a set of props.
*/

*nodes(root: Node,options: {from?: Path to?: Path reverse?: boolean pass?: (entry: NodeEntry) => boolean } = {} ): Iterable<NodeEntry> 
/**
* Return an iterable of all the node entries of a root node. Each entry is
* returned as a `[Node, Path]` tuple, with the path referring to the node's
* position inside the root node.
*/

parent(root: Node, path: Path): Ancestor 
/**
* Get the parent of a node at a specific path.
*/

string(node: Node): string
/**
* Get the concatenated text string of a node's content.
*
* Note that this will not include spaces or line breaks between block nodes.
* It is not a user-facing string, but a string for performing offset-related
* computations for a node.
*/

*texts(root: Node,options: {from?: Path to?: Path reverse?: boolean pass?: (node: NodeEntry) => boolean} = {}): Iterable<NodeEntry<Text>>
/**
* Return an iterable of all leaf text nodes in a root node.
*/
