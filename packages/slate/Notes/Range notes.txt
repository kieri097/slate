## Range
/**
 * `Range` objects are a set of points that refer to a specific span of a Slate
 * document. They can define a span inside a single node or a can span across
 * multiple nodes.
 */

export interface Range {
  anchor: Point
  focus: Point
  [key: string]: any
}

#relevant types
/**
 * `Point` objects refer to a specific location in a text node in a Slate
 * document. Its path refers to the location of the node in the tree, and its
 * offset refers to the distance into the node's string of text. Points can
 * only refer to `Text` nodes.
 */

export interface Point {
  path: Path
  offset: number
  [key: string]: any
}

#methods
edges
end
equals
includes
intersection
isBackward
isCollapsed
isExpanded
isForward
isRange
*points
start
transform


edges( range: Range, options: { reverse?: boolean } = {} ): [Point, Point]
/**
* Get the start and end points of a range, in the order in which they appear
* in the document.
*/

end(range: Range): Point
/**
* Get the end point of a range.
*/

equals(range: Range, another: Range): boolean 
/**
* Check if a range is exactly equal to another.
*/

includes(range: Range, target: Path | Point | Range): boolean
/**
* Check if a range includes a path, a point or part of another range.
*/

intersection(range: Range, another: Range): Range | null
/**
* Get the intersection of a range with another.
*/

isBackward(range: Range): boolean
/**
* Check if a range is backward, meaning that its anchor point appears in the
* document _after_ its focus point.
*/

isCollapsed(range: Range): boolean 
/**
* Check if a range is collapsed, meaning that both its anchor and focus
* points refer to the exact same position in the document.
*/

isExpanded(range: Range): boolean 
**
* Check if a range is expanded.
*
* This is the opposite of [[Range.isCollapsed]] and is provided for legibility.
*/

isForward(range: Range): boolean
/**
* Check if a range is forward.
*
* This is the opposite of [[Range.isBackward]] and is provided for legibility.
*/

isRange(value: any): value is Range
/**
* Check if a value implements the [[Range]] interface.
*/

*points(range: Range): Iterable<PointEntry>
/**
* Iterate through all of the point entries in a range.
*/

start(range: Range): Point
/**
* Get the start point of a range.
*/

transform( range: Range, op: Operation, options: { affinity: 'forward' | 'backward' | 'outward' | 'inward' | null } ): Range | null
/**
* Transform a range by an operation.
*/
