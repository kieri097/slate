## Operation
/**
 * `Operation` objects define the low-level instructions that Slate editors use
 * to apply changes to their internal state. Representing all changes as
 * operations is what allows Slate editors to easily implement history,
 * collaboration, and other features.
 */

export type Operation = NodeOperation | SelectionOperation | TextOperation

#relevant types

export type InsertNodeOperation = {
  type: 'insert_node'
  path: Path
  node: Node
  [key: string]: any
}

export type InsertTextOperation = {
  type: 'insert_text'
  path: Path
  offset: number
  text: string
  [key: string]: any
}

export type MergeNodeOperation = {
  type: 'merge_node'
  path: Path
  position: number
  target: number | null
  properties: Partial<Node>
  [key: string]: any
}

export type MoveNodeOperation = {
  type: 'move_node'
  path: Path
  newPath: Path
  [key: string]: any
}

export type RemoveNodeOperation = {
  type: 'remove_node'
  path: Path
  node: Node
  [key: string]: any
}

export type RemoveTextOperation = {
  type: 'remove_text'
  path: Path
  offset: number
  text: string
  [key: string]: any
}

export type SetNodeOperation = {
  type: 'set_node'
  path: Path
  properties: Partial<Node>
  newProperties: Partial<Node>
  [key: string]: any
}

export type SetSelectionOperation =
  | {
      type: 'set_selection'
      [key: string]: any
      properties: null
      newProperties: Range
    }
  | {
      type: 'set_selection'
      [key: string]: any
      properties: Partial<Range>
      newProperties: Partial<Range>
    }
  | {
      type: 'set_selection'
      [key: string]: any
      properties: Range
      newProperties: null
    }

export type SplitNodeOperation = {
  type: 'split_node'
  path: Path
  position: number
  target: number | null
  properties: Partial<Node>
  [key: string]: any
}

export type NodeOperation =
  | InsertNodeOperation
  | MergeNodeOperation
  | MoveNodeOperation
  | RemoveNodeOperation
  | SetNodeOperation
  | SplitNodeOperation

export type SelectionOperation = SetSelectionOperation

export type TextOperation = InsertTextOperation | RemoveTextOperation

#methods

edges( range: Range, options: { reverse?: boolean } = {} ): [Point, Point] 
/**
* Get the start and end points of a range, in the order in which they appear
* in the document.
*/

end(range: Range): Point
/**
* Get the end point of a range.
*/

equals(range: Range, another: Range): boolean 
/**
* Check if a range is exactly equal to another.
*/

includes(range: Range, target: Path | Point | Range): boolean 
/**
* Check if a range includes a path, a point or part of another range.
*/

intersection(range: Range, another: Range): Range | null
/**
* Get the intersection of a range with another.
*/

isBackward(range: Range): boolean
/**
* Check if a range is backward, meaning that its anchor point appears in the
* document _after_ its focus point.
*/

isCollapsed(range: Range): boolean
/**
* Check if a range is collapsed, meaning that both its anchor and focus
* points refer to the exact same position in the document.
*/

isExpanded(range: Range): boolean
/**
* Check if a range is expanded.
*
* This is the opposite of [[Range.isCollapsed]] and is provided for legibility.
*/

isForward(range: Range): boolean
/**
* Check if a range is forward.
*
* This is the opposite of [[Range.isBackward]] and is provided for legibility.
*/

isRange(value: any): value is Range
/**
* Check if a value implements the [[Range]] interface.
*/

*points(range: Range): Iterable<PointEntry>
/**
* Iterate through all of the point entries in a range.
*/

start(range: Range): Point
/**
* Get the start point of a range.
*/

transform( range: Range, op: Operation, options: { affinity: 'forward' | 'backward' | 'outward' | 'inward' | null }): Range | null
/**
* Transform a range by an operation.
*/
